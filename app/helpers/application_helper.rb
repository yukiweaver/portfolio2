module ApplicationHelper
  AREA_KBN = [
    ['北海道', '1'],['青森県', '2'],['岩手県', '3'],['宮城県', '4'], ['秋田県', '5'], ['山形県', '6'],
    ['福島県', '7'],['茨城県', '8'],['栃木県', '9'],['群馬県', '10'],['埼玉県', '11'],['千葉県', '12'],
    ['東京都', '13'],['神奈川県', '14'],['新潟県', '15'],['富山県', '16'],['石川県', '17'],['福井県', '18'],
    ['山梨県', '19'],['長野県', '20'],['岐阜県', '21'],['静岡県', '22'],['愛知県', '23'],['三重県', '24'],
    ['滋賀県', '25'],['京都府', '26'],['大阪府', '27'],['兵庫県', '28'],['奈良県', '29'],['和歌山県', '30'],
    ['鳥取県', '31'],['島根県', '32'],['岡山県', '33'],['広島県', '34'],['山口県', '35'],['徳島県', '36'],
    ['香川県', '37'],['愛媛県', '38'],['高知県', '39'],['福島県', '40'],['佐賀県', '41'],['長崎県', '42'],
    ['熊本県', '43'],['大分県', '44'],['宮崎県', '45'],['鹿児島県', '46'],['沖縄県', '47']
  ]

  H_AREA_KBN = {
    '1' => '北海道', '2' => '青森県', '3' => '岩手県', '4' => '宮城県', '5' => '秋田県', '6' => '山形県',
    '7' => '福島県', '8' => '茨城県', '9' => '栃木県', '10' => '群馬県', '11' => '埼玉県', '12' => '千葉県',
    '13' => '東京都', '14' => '神奈川県', '15' => '新潟県', '16' => '富山県', '17' => '石川県', '18' => '福井県',
    '19' => '山科県', '20' => '長野県', '21' => '岐阜県', '22' => '静岡県', '23' => '愛知県', '24' => '三重県',
    '25' => '滋賀県', '26' => '京都府', '27' => '大阪府', '28' => '兵庫県', '29' => '奈良県', '30' => '和歌山県',
    '31' => '鳥取県', '32' => '島根県', '33' => '岡山県', '34' => '広島県', '35' => '山口県', '36' => '徳島県',
    '37' => '香川県', '38' => '愛媛県', '39' => '高知県', '40' => '福島県', '41' => '佐賀県', '42' => '長崎県',
    '43' => '熊本県', '44' => '大分県', '45' => '宮城県', '46' => '鹿児島県', '47' => '沖縄県'
  }

  SEX_KBN = {
    '1' => '男性',
    '2' => '女性'
  }

  INCOME_KBN = [
    ['100万円未満', '1'], ['100万円〜200万円未満', '2'], ['200万円〜300万円未満', '3'],
    ['300万円〜400万円未満', '4'], ['400万円〜500万円未満', '5'], ['500万円〜600万円未満', '6'],
    ['600万円〜700万円未満', '7'], ['700万円〜800万円未満', '8'], ['800万円〜900万円未満', '9'],
    ['900万円〜1000万円未満', '10'], ['1000万円以上', '11']
  ]

  H_INCOME_KBN = {
    '1' => '100万円未満',
    '2' => '100万円〜200万円未満',
    '3' => '200万円〜300万円未満',
    '4' => '300万円〜400万円未満',
    '5' => '400万円〜500万円未満',
    '6' => '500万円〜600万円未満',
    '7' => '600万円〜700万円未満',
    '8' => '700万円〜800万円未満',
    '9' => '800万円〜900万円未満',
    '10' => '900万円〜1000万円未満',
    '11' => '1000万円以上',
  }

  BUSINESS_KBN = [
    ['公務員', '1'], ['経営者・役員', '2'], ['会社員', '3'], ['自営業', '4'], ['自由業', '5'],
    ['専業主婦', '6'], ['パートアルバイト', '7'], ['学生', '8'], ['その他', '9']
  ]

  H_BUSINESS_KBN = {
    '1' => '公務員',
    '2' => '経営者・役員',
    '3' => '会社員',
    '4' => '自営業',
    '5' => '自由業',
    '6' => '専業主婦',
    '7' => 'パートアルバイト',
    '8' => '学生',
    '9' => 'その他',
  }

  # ログインユーザーのidを返す（return int）
  def user_id
    @user_id ||= session[:login]['user_id']
  end

  # ログインユーザーの性別を返す（return string）
  def user_sex_kbn
    @sex_kbn ||= session[:login]['sex_kbn']
  end

  # 現在ログイン中のユーザーを返す
  def current_user
    if session[:login]
      @current_user ||= User.find_by(id: session[:login]['user_id'])
    end
    return @current_user
  end

  # before_action：ユーザーがログイン中なら検索ページへ遷移
  def logged_in_user
    redirect_to user_path(id: [:login]['user_id']) unless session[:login].nil?
  end

  # before_action：ユーザーがログアウト中ならトップページへ遷移
  def logged_out_user
    redirect_to root_path if session[:login].nil?
  end

  # 初回メッセージ送信済みか判定
  # 9 9 以外のルームが存在するということは、どちらかが初回メッセージをすでに送っているということ
  def is_first_msg?(from_user_id, to_user_id, from_user_status='9', to_user_status='9')
    room = Room.get_room_info(from_user_id, to_user_id, from_user_status, to_user_status)
    if room.blank?
      return false
    end
    return true
  end

  # 日時を文字列でフォーマット変換
  def time_format(datetime)
    return datetime.strftime("%H:%M")
  end

  # 送信者をキーとして最新のメッセージを含むレコード一件取得
  def latest_message(from_user_id)
    event = Event.where(from_user_id: from_user_id, event_kbn: '12').order(created_at: 'DESC').limit(1)
    return event + []
  end

  # 文字列をBase64エンコードする
  def encode(str)
    Base64.encode64(str)
  end

  # Base64エンコードされたものをデコードする
  def decode(str)
    Base64.decode64(str)
  end
end
